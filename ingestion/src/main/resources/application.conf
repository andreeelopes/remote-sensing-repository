# This is the main configuration file for our application, it provides overrides to the default values
# provided in the reference.conf of the modules from Akka
akka {
  actor {
    # Must be set like this to use Akka Cluster
    provider = cluster

    # Only for convenience in the quickstart, Java serialization should not be used for actual applications
    warn-about-java-serializer-usage = off


    //    serializers {
    //      java = "akka.serialization.JavaSerializer"
    //      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    //    }
    //
    //    serialization-bindings {
    //      "utils.KryoSerializable" = kryo
    //    }

    //    kryo{
    //      type = "graph"
    //      idstrategy = "default"
    //      serializer-pool-size = 16
    //      buffer-size = 4096
    //      use-manifests = false
    //      implicit-registration-logging = false
    //      kryo-trace = false
    //    }

  }

  remote {
    maximum-payload-bytes = 100000000 bytes
    netty.tcp {
      message-frame-size = 100000000b
      send-buffer-size = 100000000b
      receive-buffer-size = 100000000b
      maximum-frame-size = 100000000b
    }
  }

  # Use slf4j (backed by logback) for logging, additional configuration
  # can be done in logback.xml
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = INFO

  # For the sample, just bind to loopback and do not allow access from the network
  remote.netty.tcp.hostname = 127.0.0.1
  # the port is overridden by the logic in Main.scala
  remote.netty.tcp.port = 0

  cluster {
    # Seed nodes are a way to have a node join the cluster (or form a new cluster) from configuration.
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      "akka.tcp://ClusterSystem@127.0.0.1:2552",
      "akka.tcp://ClusterSystem@127.0.0.1:2553",
      "akka.tcp://ClusterSystem@127.0.0.1:2554"]

    # Only for convenience in the quickstart, auto-downing should not be used for actual applications.
    # Read more here: http://doc.akka.io/docs/akka/current/scala/cluster-usage.html#auto-downing-do-not-use-
    auto-down-unreachable-after = 10s

    # Needed when running many actor systems in the same JVM
    jmx.multi-mbeans-in-same-jvm = on
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  # Run the pubsub mediator on all nodes, without any code starting it up
  extensions = ["akka.cluster.pubsub.DistributedPubSub",
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"]


  http {
    server.parsing.illegal-header-warnings = off
    client.parsing.illegal-header-warnings = off
  }

}

# Configuration related to the app is in its own namespace
distributed-workers {
  # Each worker pings the master with this interval
  # to let it know that it is alive
  worker-registration-interval = 10s
  # If a worker hasn't gotten in touch in this long
  # it is removed from the set of workers
  consider-worker-dead-after = 60s
  # Must be shorter than all the source's work-timeout
  # recommended value is half of the minimum work-timeout
  clean-up-timeout = 10s

}


sources {


  earth-explorer {
    description = "Earth Explorer - developed by USGS"
    base-url = "https://earthexplorer.usgs.gov/inventory/json/v/1.4.0/"
    fetching-frequency = 20s
    epoch = 6 //years
    # Retry starts after x seconds of the previous try
    retry-interval = 3s
    # Retry stops after x seconds without response
    retry-timeout = 5s
    # If a workload hasn't finished in this long it
    # is considered failed and is retried
    work-timeout = 40s
    start-delay = 20s
    page-size = 10

    products = [
      //      {program = "landsat", platform = "Landsat8", product-type = ["LANDSAT_8_C1"]},
      //      {program = "landsat", platform = "Landsat7", product-type = ["LSR_LANDSAT_ETM_C1"]},
      //      {program = "", platform = "modis", product-type = ["MODIS_MYD13Q1_V6"]}
    ]


    extractions = [
      {
        name = "metadata"
        query-type = "file"
        result-type = "json"
        query = "$"
        context = "metadata"
        context-format = "json"
        dest-path = "./data/(productId)/query-metadata.json"
        metamodel-mapping = "metadata-file"
      },
      {
        name = "entityid"
        query-type = "single-value"
        result-type = "string"
        query = "$.data..entityId"
        context = "metadata"
        context-format = "json"
        dest-path = "./data/(productId)/query-entityId.json"
        metamodel-mapping = "productId"
      },
      {
        name = "displayId"
        query-type = "single-value"
        result-type = "string"
        query = "$.data..displayId"
        context = "metadata"
        context-format = "json"
        dest-path = "./data/(productId)/query-displayId.json"
        metamodel-mapping = "title"
      },
      {
        name = "acquisitionDate"
        query-type = "single-value"
        result-type = "string"
        query = "$.data..acquisitionDate"
        context = "metadata"
        context-format = "json"
        dest-path = "./data/(productId)/query-acquisitionDate.json"
        metamodel-mapping = "acquisitionDate"
      },
      {
        name = "spatialFootprint"
        query-type = "single-value"
        result-type = "object"
        query = "$.data..spatialFootprint"
        context = "metadata"
        context-format = "json"
        dest-path = "./data/(productId)/query-spatialFootprint.json"
        metamodel-mapping = "footprint"
      },
      //      {
      //        name = "sceneBounds"
      //        query-type = "single-value"
      //        result-type = "string"
      //        query = "$.data..sceneBounds"
      //        context = "metadata"
      //        context-format = "json"
      //        dest-path = "./data/(productId)/query-sceneBounds.json"
      //        metamodel-mapping = "sceneBounds"
      //      },
      {
        name = "fgdcMetadataUrl"
        query-type = "single-value"
        result-type = "string"
        query = "$.data..fgdcMetadataUrl"
        context = "metadata"
        context-format = "json"
        dest-path = "./data/(productId)/query-fgdcMetadataUrl.json"
        metamodel-mapping = "fgdc-metadata-file"
      },
      {
        name = "browseUrl"
        query-type = "single-value"
        result-type = "string"
        query = "$.data..browseUrl"
        context = "metadata"
        context-format = "json"
        dest-path = "./data/(productId)/query-browseUrl.json"
        metamodel-mapping = "icon-file"
      }

    ]

    landsat = {
      extractions = [
        {
          name = "start_time"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Start Time')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-start_time.json"
          metamodel-mapping = "acquisitionDate-start"
        },
        {
          name = "stop_time"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Stop Time')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-stop-time.json"
          metamodel-mapping = "acquisitionDate-stop"
        },
        {
          name = "Collection Category"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Collection Category')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-category.json"
          metamodel-mapping = "collection-tier"
        },
        {
          name = "WRS Path"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='WRS Path')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-wrsPath.json"
          metamodel-mapping = "wrs-path"
        },
        {
          name = "WRS Row"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='WRS Row')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-wrsRow.json"
          metamodel-mapping = "wrs-row"
        },
        {
          name = "Date L-1 Generated"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Date L-1 Generated')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-datel1gen.json"
          metamodel-mapping = "last-L1-product"
        },
        {
          name = "Image Quality"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Image Quality')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-ImageQuality.json"
          metamodel-mapping = "image-quality"
        },
        {
          name = "Land Cloud Cover"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Land Cloud Cover')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-landcloudcover.json"
          metamodel-mapping = "land-cloud-cover-percentage"
        },
        {
          name = "Scene Cloud Cover"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Scene Cloud Cover')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-SceneCloudCover.json"
          metamodel-mapping = "cloud-cover-percentage"
        },
        {
          name = "Data Type Level-1"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Data Type Level-1')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-DataTypeLevel-1.json"
          metamodel-mapping = "product-type-l1"
        },
        {
          name = "Collection Number"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Collection Number')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-CollNumber.json"
          metamodel-mapping = "collection-number"
        },
        {
          name = "UTM Zone"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='UTM Zone')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-UTMZone.json"
          metamodel-mapping = "utm-zone"
        },


      ]
    }

    landsat8 = {
      extractions = [
        {
          name = "Day/Night Indicator"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Day/Night Indicator')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-DayNightIndicator.json"
          metamodel-mapping = "day-night-indicator"
        },
        {
          name = "Target WRS Path"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Target WRS Path')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-TargetWRSPath.json"
          metamodel-mapping = "target-wrs-path"
        },
        {
          name = "Target WRS Row"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Target WRS Row')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-TargetWRSRow.json"
          metamodel-mapping = "target-wrs-row"
        },
        {
          name = "Nadir/Off Nadir"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Nadir/Off Nadir')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-NadirOffNadir.json"
          metamodel-mapping = "nadir-condition"
        },
        {
          name = "Roll Angle"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Roll Angle')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-RollAngle.json"
          metamodel-mapping = "roll-angle"
        },
        {
          name = "Sensor Identifier"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Sensor Identifier')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-SensorIdentifier.json"
          metamodel-mapping = "instrument-short-name"
        },
        {
          name = "Sun Elevation L1"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Sun Elevation L1')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-SunElevationL1.json"
          metamodel-mapping = "sun-elevation"
        },
        {
          name = "Sun Azimuth L1"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Sun Azimuth L1')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-SunAzimuthL1.json"
          metamodel-mapping = "sun-azimuth"
        },
      ]
    }

    landsast7 = {
      extractions = [
        {
          name = "Sensor Mode"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Sensor Mode')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-SensorMode.json"
          metamodel-mapping = "sensor-mode"
        },
        {
          name = "Sun Elevation L1"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Sun Elevation L1')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-col-SunElevationL1.json"
          metamodel-mapping = "sun-elevation"
        },
        {
          name = "Sun Azimuth L-1"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Sun Azimuth L-1')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-SunAzimuthL-1.json"
          metamodel-mapping = "sun-azimuth"
        },
      ]
    }

    MODIS_MYD13Q1_V6 = {
      extractions = [
        {
          name = "Local Granule ID"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Local Granule ID')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-LocalgranuleID.json"
          metamodel-mapping = "granule-id"
        },
        {
          name = "Acquisition Start Date"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Acquisition Start Date')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-AcquisitionStartDate.json"
          metamodel-mapping = "acquisitionDate-start"
        },
        {
          name = "Acquisition End Date"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Acquisition End Date')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-AcquisitionEndDate.json"
          metamodel-mapping = "acquisitionDate-stop"
        },
        {
          name = "Vertical Tile Number"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Vertical Tile Number')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-VerticalTileNumber.json"
          metamodel-mapping = "vertical-tile-number"
        },
        {
          name = "Horizontal Tile Number"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Horizontal Tile Number')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-HorizontalTileNumber.json"
          metamodel-mapping = "horizontal-tile-number"
        },
        {
          name = "Missing Data Percentage"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Missing Data Percentage')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-MissingDataPercentage.json"
          metamodel-mapping = "no-data-percentage"
        },

      ]
    }

  }


  copernicus {

    copernicus-oah-opensearch {

      description = "Copernicus Open Access Hub - OpenSearch"

      base-url = "https://scihub.copernicus.eu/dhus/search?"
      fetching-frequency = 20s
      epoch = 6 //years
      # Retry starts after x seconds of the previous try
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 40s
      start-delay = 20s
      page-size = 10
      credentials {
        username = "andrelopes"
        pwd = "andrelopez14"
      }
      # The products that I am interested in
      # https://scihub.copernicus.eu/userguide/AdvancedSearch check product type for the syntax
      products = [
        {program = "sentinel", platform = "Sentinel2", product-type = ["S2MSI1C", "S2MSI2A"]},
        //        {program = "sentinel", platform = "Sentinel1", product-type = ["SLC"]},
        //        {program = "sentinel", platform = "Sentinel3", product-type = ["OL_1_ERR___"]}
      ]

      extractions = []

      sentinel = {
        extractions = [
          {
            name = "entry"
            query-type = "file"
            result-type = "json"
            query = "$"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-entry.json"
            metamodel-mapping = "metadata-file"
          },
          {
            name = "summary"
            query-type = "single-value"
            result-type = "string"
            query = "$.summary"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-summary.json"
            metamodel-mapping = "summary"
          },
          {
            name = "id"
            query-type = "single-value"
            result-type = "string"
            query = "$.id"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-id.json"
            metamodel-mapping = "product-id"
          },
          {
            name = "title"
            query-type = "single-value"
            result-type = "string"
            query = "$.title"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-title.json"
            metamodel-mapping = "title"
          },
          {
            name = "ingestiondate"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='ingestiondate')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-ingestiondate.json"
            metamodel-mapping = "ingestionDate"
          },
          {
            name = "beginposition"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='beginposition')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-beginposition.json"
            metamodel-mapping = "acquisitionDate-start"
          },
          {
            name = "endposition"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='endposition')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-endposition.json"
            metamodel-mapping = "acquisitionDate-end"
          },
          {
            name = "footprint"
            query-type = "single-value"
            result-type = "string"
            result-type-transformation = "object"
            query = "$.str[?(@.name=='footprint')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-footprint.json"
            metamodel-mapping = "footprint"
          },
          {
            name = "instrumentshortname"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='instrumentshortname')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-instrumentshortname.json"
            metamodel-mapping = "instrument-short-name"
          },
          {
            name = "instrumentname"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='instrumentname')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-instrumentname.json"
            metamodel-mapping = "instrument-name"
          },
          {
            name = "platformname"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='platformname')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-platformname.json"
            metamodel-mapping = "platform-name"
          },
          {
            name = "size"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='size')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-size.json"
            metamodel-mapping = "size"
          },
          {
            name = "icon-url"
            query-type = "single-value"
            result-type = "string"
            query = "$.link[?(@.rel=='icon')].href"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-icon_url.json"
            metamodel-mapping = "icon-file"
          },
          {
            name = "product-url"
            query-type = "single-value"
            result-type = "string"
            query = "$.link[?(!@.rel)].href"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-product-url.json"
            metamodel-mapping = "original-product-file"
          },
          {
            name = "orbitnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='orbitnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-orbitnumber.json"
            metamodel-mapping = "orbit-number"
          },
          {
            name = "relativeorbitnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='relativeorbitnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-relativeorbitnumber.json"
            metamodel-mapping = "relative-orbit-number"
          },
          {
            name = "orbitdirection"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='orbitdirection')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-orbitdirection.json"
            metamodel-mapping = "orbit-direction"
          },
        ]
      }

      sentinel2 = {
        extractions = [
          {
            name = "processinglevel"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='processinglevel')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-processinglevel.json"
            metamodel-mapping = "processing-level"
          },
          {
            name = "s2datatakeid"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='s2datatakeid')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-s2datatakeid.json"
            metamodel-mapping = "datatake-id"
          },
          {
            name = "cloudcoverpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='cloudcoverpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-cloudcoverpercentage.json"
            metamodel-mapping = "cloud-cover-percentage"
          },
        ]
      }


      S2MSI1C = {
        extractions = [
          {
            name = "tileid"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='tileid')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-tileid.json"
            metamodel-mapping = "tile-id"
          },
          {
            name = "hv_order_tileid"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='hv_order_tileid')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-hv_order_tileid.json"
            metamodel-mapping = "hv-order-tile-id"
          },
          {
            name = "datatakesensingstart"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='datatakesensingstart')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-datatakesensingstart.json"
            metamodel-mapping = "datatake-sensing-start"
          },

        ]
      }

      S2MSI2A = {
        extractions = [

          {
            name = "highprobacloudspercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='highprobacloudspercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-highprobacloudspercentage.json"
            metamodel-mapping = "high-proba-clouds-percentage"
          },
          {
            name = "mediumprobacloudspercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='mediumprobacloudspercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-mediumprobacloudspercentage.json"
            metamodel-mapping = "medium-proba-clouds-percentage"
          }, {
            name = "notvegetatedpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='notvegetatedpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-notvegetatedpercentage.json"
            metamodel-mapping = "not-vegetated-percentage"
          }, {
            name = "snowicepercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='snowicepercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-snowicepercentage.json"
            metamodel-mapping = "snow-ice-percentage"
          }, {
            name = "unclassifiedpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='unclassifiedpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-unclassifiedpercentage.json"
            metamodel-mapping = "unclassified-percentage"
          },
          {
            name = "vegetationpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='vegetationpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-vegetationpercentage.json"
            metamodel-mapping = "vegetation-percentage"
          },
          {
            name = "waterpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='waterpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-waterpercentage.json"
            metamodel-mapping = "water-percentage"
          },
        ]
      }


      sentinel3 = {
        extractions = [
          {
            name = "creationdate"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='creationdate')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-creationdate.json"
            metamodel-mapping = "creation-dat"
          },
          {
            name = "productlevel"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='productlevel')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-productlevel.json"
            metamodel-mapping = "processing-level"
          },
          {
            name = "relorbitdir"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='relorbitdir')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-relorbitdir.json"
            metamodel-mapping = "relative-orbit-dir"
          },
          {
            name = "relpassnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.str[?(@.name=='relpassnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-relpassnumber.json"
            metamodel-mapping = "relative-pass-number"
          },
          {
            name = "relpassdirection"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='relpassdirection')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-relpassdirection.json"
            metamodel-mapping = "relative-pass-direction"
          },
          {
            name = "timeliness"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='timeliness')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-timeliness.json"
            metamodel-mapping = "timeliness"
          },
          {
            name = "pduduration"
            query-type = "single-value"
            result-type = "int"
            query = "$.str[?(@.name=='pduduration')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-pduduration.json"
            metamodel-mapping = "pdu-duration"
          },
          {
            name = "sensoroperationalmode"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='sensoroperationalmode')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-sensoroperationalmode.json"
            metamodel-mapping = "sensor-mode"
          },

        ]
      }


      sentinel1 = {
        extractions = [
          {
            name = "swathidentifier"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='swathidentifier')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-swathidentifier.json"
            metamodel-mapping = "swath-id"
          },
          {
            name = "polarisationmode"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='polarisationmode')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-polarisationmode.json"
            metamodel-mapping = "polarisation-mode"
          },
          {
            name = "productclass"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='productclass')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-productclass.json"
            metamodel-mapping = "product-class"
          },
          {
            name = "missiondatatakeid"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='missiondatatakeid')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-missiondatatakeid.json"
            metamodel-mapping = "mission-datatake-id"
          },
          {
            name = "lastorbitnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='lastorbitnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-lastorbitnumber.json"
            metamodel-mapping = "last-orbit-number"
          },
          {
            name = "lastrelativeorbitnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='lastrelativeorbitnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-lastrelativeorbitnumber.json"
            metamodel-mapping = "last-relative-orbit-number"
          },


        ]
      }

    }


    copernicus-oah-odata {

      description = "Copernicus Open Access Hub - OData"

      base-url = "https://scihub.copernicus.eu/dhus/odata/v1/"
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 20s

      credentials {
        username = "andrelopes"
        pwd = "andrelopez14"
      }


      extractions = [
        {
          name = "manifest"
          query-type = "file"
          result-type = "json"
          query = "$"
          context = ""
          context-format = "xml"
          dest-path = "./data/(productId)/query-manifest.json"
          metamodel-mapping = "sentinel-manifest-file"
        }
      ]


      sentinel1 = {
        extractions = [
          //          {
          //            name = "s1Level1ProductSchema"
          //            query-type = "container"
          //            result-type = ""
          //            query = ""
          //            context = ""
          //            context-format = ""
          //            dest-path = ""
          //            metamodel-mapping = "s1Level1ProductSchema"
          //          },
          //          {
          //            name = "s1Level1NoiseSchema"
          //            query-type = "container"
          //            result-type = ""
          //            query = ""
          //            context = ""
          //            context-format = ""
          //            dest-path = ""
          //            metamodel-mapping = "s1Level1NoiseSchema"
          //          },

        ]

      }

      OL_1_ERR___ = {
        extractions = [
          {
            name = "saline-water-percentage"
            query-type = "single-value"
            result-type = "string"
            query = "$.xfdu:XFDU.metadataSection..metadataObject[?(@.ID=='olciProductInformation')].metadataWrap.xmlData.olci:olciProductInformation.olci:classificationSummary.sentinel3:salineWaterPixels.percentage"
            context = "manifest"
            context-format = "xml"
            dest-path = "./data/(productId)/query-saline-water-percentage.json"
            metamodel-mapping = "saline-water-percentage"
          },
          {
            name = "qualityFlagsData"
            query-type = "file"
            result-type = "nc"
            query = "$"
            context = ""
            context-format = ""
            dest-path = "./data/(productId)/query-qualityFlagsData-file.json"
            metamodel-mapping = "qualityFlagsData-file"
          },

          //          <olci:olciProductInformation>
          //          <olci:classificationSummary>
          //          <sentinel3:salineWaterPixels percentage="43.000000"/>
          //          <sentinel3:coastalPixels percentage="0.000000"/>
          //          <sentinel3:freshInlandWaterPixels percentage="1.000000"/>
          //          <sentinel3:tidalRegionPixels percentage="0.000000"/>
          //          <sentinel3:brightPixels percentage="49.480278"/>
          //          </olci:classificationSummary>
          //          <olci:measurementAccuracy>2.000000</olci:measurementAccuracy>
          //          <olci:accuracyReference>0</olci:accuracyReference>
          //          <olci:imageSize>
          //          <sentinel3:rows>15081</sentinel3:rows>
          //          <sentinel3:columns>1217</sentinel3:columns>
          //          </olci:imageSize>
          //          <olci:pixelQualitySummary>
          //          <olci:invalidPixels value="629390" percentage="3.000000"/>
          //          <olci:cosmeticPixels value="16576" percentage="0.000000"/>
          //          <olci:duplicatedPixels value="0" percentage="0.000000"/>
          //          <olci:saturatedPixels value="4883" percentage="0.000013"/>
          //          <olci:dubiousSamples value="3782" percentage="0.000000"/>
          //          </olci:pixelQualitySummary>


        ]
      }


    }
  }


  creodias {
    creodias-odata {

      description = "CREODIAS - OData"

      base-url = "https://finder.creodias.eu/resto/api/collections"
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 20s

      extractions = [

      ]

      sentinel2 = {
        extractions = [
          {
            name = "creodias-file"
            query-type = "file"
            result-type = "json"
            query = "$"
            context = ""
            context-format = "json"
            dest-path = "./data/(productId)/query-file.json"
            metamodel-mapping = "creodias-metadata-file"
          },
          {
            name = "keywords"
            query-type = "multi-value"
            result-type = "object"
            query = "$.features[0].properties.keywords[*]"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-keywords.json"
            metamodel-mapping = "keywords"
          },
        ]
      }

    }
  }
}
