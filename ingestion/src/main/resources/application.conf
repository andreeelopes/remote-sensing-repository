# This is the main configuration file for our application, it provides overrides to the default values
# provided in the reference.conf of the modules from Akka
akka {
  actor {
    # Must be set like this to use Akka Cluster
    provider = cluster

    # Only for convenience in the quickstart, Java serialization should not be used for actual applications
    warn-about-java-serializer-usage = off


    //    serializers {
    //      java = "akka.serialization.JavaSerializer"
    //      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    //    }
    //
    //    serialization-bindings {
    //      "utils.KryoSerializable" = kryo
    //    }

    //    kryo{
    //      type = "graph"
    //      idstrategy = "default"
    //      serializer-pool-size = 16
    //      buffer-size = 4096
    //      use-manifests = false
    //      implicit-registration-logging = false
    //      kryo-trace = false
    //    }

  }

  remote {
    maximum-payload-bytes = 100000000 bytes
    netty.tcp {
      message-frame-size = 100000000b
      send-buffer-size = 100000000b
      receive-buffer-size = 100000000b
      maximum-frame-size = 100000000b
    }
  }

  # Use slf4j (backed by logback) for logging, additional configuration
  # can be done in logback.xml
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = INFO

  # For the sample, just bind to loopback and do not allow access from the network
  remote.netty.tcp.hostname = 127.0.0.1
  # the port is overridden by the logic in Main.scala
  remote.netty.tcp.port = 0

  cluster {
    # Seed nodes are a way to have a node join the cluster (or form a new cluster) from configuration.
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      "akka.tcp://ClusterSystem@127.0.0.1:2552",
      "akka.tcp://ClusterSystem@127.0.0.1:2553",
      "akka.tcp://ClusterSystem@127.0.0.1:2554"]

    # Only for convenience in the quickstart, auto-downing should not be used for actual applications.
    # Read more here: http://doc.akka.io/docs/akka/current/scala/cluster-usage.html#auto-downing-do-not-use-
    auto-down-unreachable-after = 10s

    # Needed when running many actor systems in the same JVM
    jmx.multi-mbeans-in-same-jvm = on
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  # Run the pubsub mediator on all nodes, without any code starting it up
  extensions = ["akka.cluster.pubsub.DistributedPubSub",
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"]


  http {
    server.parsing.illegal-header-warnings = off
    client.parsing.illegal-header-warnings = off
  }

}

# Configuration related to the app is in its own namespace
distributed-workers {
  # Each worker pings the master with this interval
  # to let it know that it is alive
  worker-registration-interval = 10s
  # If a worker hasn't gotten in touch in this long
  # it is removed from the set of workers
  consider-worker-dead-after = 60s
  # Must be shorter than all the source's work-timeout
  # recommended value is half of the minimum work-timeout
  clean-up-timeout = 10s

}


sources {


  earth-explorer {
    description = "Earth Explorer - developed by USGS"
    base-url = "https://earthexplorer.usgs.gov/inventory/json/v/1.4.0/"
    fetching-frequency = 20s
    epoch = 6 //years
    # Retry starts after x seconds of the previous try
    retry-interval = 3s
    # Retry stops after x seconds without response
    retry-timeout = 5s
    # If a workload hasn't finished in this long it
    # is considered failed and is retried
    work-timeout = 40s
    start-delay = 20s
    page-size = 10

    products = [
      {program = "landsat", platform = "Landsat8", product-type = ["LANDSAT_8_C1"]},
      //      {program = "landsat", platform = "Landsat7", product-type = ["LSR_LANDSAT_ETM_C1"]},
    ]

    extractions = [
      {
        name = "metadata"
        query-type = "file"
        result-type = "json"
        query = "$"
        context = ""
        context-format = "json"
        dest-path = "./data/(productId)/query-metadata.json"
      }

    ]

    landsat7 = {

      extractions = [
        {
          name = "executionTime"
          query-type = "single-value"
          result-type = "double"
          query = "$.executionTime"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-executionTime.json"
        }
      ]
    }


    landsat8 = {
      extractions = [
        {
          name = "coordinates"
          query-type = "single-value"
          result-type = "object"
          query = "$.data..spatialFootprint.coordinates"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-coordinates.json"
        }
      ]
    }


    landsat = {
      extractions = [
        {
          name = "product_id"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Landsat Product Identifier')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-id.json"
        }
      ]
    }

  }


  copernicus {

    copernicus-oah-opensearch {

      description = "Copernicus Open Access Hub - OpenSearch"

      base-url = "https://scihub.copernicus.eu/dhus/search?"
      fetching-frequency = 20s
      epoch = 6 //years
      # Retry starts after x seconds of the previous try
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 40s
      start-delay = 20s
      page-size = 10
      credentials {
        username = "andrelopes"
        pwd = "andrelopez14"
      }
      # The products that I am interested in
      # https://scihub.copernicus.eu/userguide/AdvancedSearch check product type for the syntax
      products = [
        //        {program = "sentinel", platform = "Sentinel2", product-type = ["S2MSI1C", "S2MSI2A"]},
        //        {program = "sentinel", platform = "Sentinel1", product-type = ["SLC"]},
        //        {program = "sentinel", platform = "Sentinel3", product-type = ["OL_1_ERR___"]}
      ]

    }


    copernicus-oah-odata {

      description = "Copernicus Open Access Hub - OData"

      base-url = "https://scihub.copernicus.eu/dhus/odata/v1/"
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 20s

      credentials {
        username = "andrelopes"
        pwd = "andrelopez14"
      }


      extractions = [
        {
          name = "manifest"
          query-type = "file"
          result-type = "xml"
          query = "$"
          context = ""
          context-format = "xml"
          dest-path = "./data/(productId)/query-manifest.json"
        }
      ]

      //      sentinel = {
      //        extractions = [
      //
      //        ]
      //      }

      sentinel1 = {
        extractions = [
          {
            name = "mapoverlay"
            query-type = "file"
            result-type = "xml"
            query = "$"
            context = ""
            context-format = "xml"
            dest-path = "./data/(productId)/query-mapoverlay.json"
          }
        ]
      }

      SLC = {
        extractions = [
        ]
      }

      sentinel2 = {

        extractions = [
          {
            name = "INSPIRE_Metadata"
            query-type = "file"
            result-type = "xml"
            query = "$"
            context = ""
            context-format = "xml"
            dest-path = "./data/(productId)/query-(filename)"
          },
          {
            name = "manifest"
            query-type = "file"
            result-type = "xml"
            query = "$.xfdu:XFDU"
            context = "manifest"
            context-format = "xml"
            dest-path = "./data/(productId)/query-informationPackageMap.json"
          },
          //          {
          //            api = "copernicus-odata"
          //            name = "md_metadata"
          //            query-type = "file"
          //            result-type = "xml"
          //            query = "/MD_Metadata/fileIdentifier"
          //            context = "INSPIRE_Metadata"
          //            dest-path = "./data/(productId)/fileId.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "INSPIRE_Metadata-publisher"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/MD_Metadata/fileIdentifier/CharacterString"
          //            context = "INSPIRE_Metadata"
          //            dest-path = "./data/(productId)/publisher.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "INSPIRE_Metadata-nodeset"
          //            query-type = "multi-file"
          //            result-type = "xml"
          //            query = "//keyword/CharacterString"
          //            context = "INSPIRE_Metadata"
          //            dest-path = "./data/(productId)/multi-file-test.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "keywords"
          //            query-type = "multi-value"
          //            result-type = "string"
          //            query = "//keyword/CharacterString"
          //            context = "INSPIRE_Metadata"
          //            dest-path = "./data/(productId)/keywords.xml"
          //          }
          {
            name = "Datastrips"
            query-type = "container"
            result-type = ""
            query = ""
            context = ""
            context-format = ""
            dest-path = ""
          }

        ]

      }


      S2MSI1C = {
        extractions = [
          {
            name = "product-type"
            query-type = "single-value"
            result-type = "string"
            query = "$.n1:Level-1C_User_Product.n1:General_Info.Product_Info.PRODUCT_TYPE"
            context = "S2_Level-1C_Product_Metadata"
            context-format = "xml"
            dest-path = "./data/(productId)/query-product-type.json"
          }//,
          //          {
          //            api = "copernicus-odata"
          //            name = "processing-level"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/General_Info/Product_Info/PROCESSING_LEVEL"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/processing-level.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "processing-level"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/General_Info/Product_Info/PROCESSING_LEVEL"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/processing-level.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "datatakeId"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/General_Info/Product_Info/Datatake/@datatakeIdentifier"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/datatakeId.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "platform"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/General_Info/Product_Info/Datatake/SPACECRAFT_NAME"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/platform.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "orbit-number"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/General_Info/Product_Info/Datatake/SENSING_ORBIT_NUMBER"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/orbit-number.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "datatake-sensing-start"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/General_Info/Product_Info/Datatake/DATATAKE_SENSING_START"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/datatake-sensing-start.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "datatake-type"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/General_Info/Product_Info/Datatake/DATATAKE_TYPE"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/datatake-type.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "cloud-coverage"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/Quality_Indicators_Info/Cloud_Coverage_Assessment"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/cloud-coverage.xml"
          //          },
          //          {
          //            api = "copernicus-odata"
          //            name = "footprint"
          //            query-type = "single-value"
          //            result-type = "string"
          //            query = "/Level-1C_User_Product/Geometric_Info/Product_Footprint/Product_Footprint/Global_Footprint/EXT_POS_LIST"
          //            context = "S2_Level-1C_Product_Metadata"
          //            dest-path = "./data/(productId)/footprint.xml"
          //          }
          //          {
          //            api = "copernicus-odata"
          //            name = "QI_DATA_Tile1"
          //            query-type = "container"
          //            result-type = "undefined"
          //            query = ""
          //            context = ""
          //            dest-path = ""
          //          }

        ]
      }

      S2MSI2A = {
        extractions = [

        ]
      }

      OL_1_ERR___ = {
        extractions = [
          {
            name = "geoCoordinatesData"
            query-type = "file"
            result-type = "nc"
            query = "$"
            context = ""
            context-format = "nc"
            dest-path = "./data/(productId)/query-(filename)"
          }

        ]
      }

    }
  }


  creodias {
    creodias-odata {

      description = "CREODIAS - OData"

      base-url = "https://finder.creodias.eu/resto/api/collections"
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 20s

      extractions = [

      ]

      sentinel2 = {
        extractions = [
          {
            name = "keywords"
            query-type = "multi-file"
            result-type = "json"
            query = "$.features[0].properties.keywords[*]"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-keywords-multi-file.json"
          },
          {
            name = "properties"
            query-type = "file"
            result-type = "json"
            query = "$.properties"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-properties.json"
          },
          {
            name = "creodias-file"
            query-type = "file"
            result-type = "json"
            query = "$"
            context = ""
            context-format = "json"
            dest-path = "./data/(productId)/query-file.json"
          },
          {
            name = "keywords-multi-value"
            query-type = "multi-value"
            result-type = "object"
            query = "$.features[0].properties.keywords[*]"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-keywords-multi-value.json"
          },
          {
            name = "keywords-name"
            query-type = "multi-value"
            result-type = "string"
            query = "$.features[0].properties.keywords[*].value"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-keywords-value.json"
          },
          {
            name = "keywords-single-value"
            query-type = "single-value"
            result-type = "object"
            query = "$.features[0].properties.keywords[0]"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-keywords-single-value.json"
          },
          {
            name = "totalResults"
            query-type = "single-value"
            result-type = "int"
            query = "$.properties.totalResults"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-totalResults.json"
          },
          {
            name = "exactCount"
            query-type = "single-value"
            result-type = "boolean"
            query = "$.properties.exactCount"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-exactCount.json"
          },
          {
            name = "processingTime"
            query-type = "single-value"
            result-type = "double"
            query = "$.properties.query.processingTime"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-processingTime.json"
          },
          {
            name = "collection"
            query-type = "single-value"
            result-type = "string"
            query = "$.features[0].properties.collection"
            context = "creodias-file"
            context-format = "json"
            dest-path = "./data/(productId)/query-collection.json"
          }

        ]
      }

    }
  }
}
