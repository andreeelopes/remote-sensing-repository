# This is the main configuration file for our application, it provides overrides to the default values
# provided in the reference.conf of the modules from Akka
akka {
  actor {
    # Must be set like this to use Akka Cluster
    provider = cluster

    # Only for convenience in the quickstart, Java serialization should not be used for actual applications
    warn-about-java-serializer-usage = off


    //    serializers {
    //      java = "akka.serialization.JavaSerializer"
    //      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    //    }
    //
    //    serialization-bindings {
    //      "utils.KryoSerializable" = kryo
    //    }

    //    kryo{
    //      type = "graph"
    //      idstrategy = "default"
    //      serializer-pool-size = 16
    //      buffer-size = 4096
    //      use-manifests = false
    //      implicit-registration-logging = false
    //      kryo-trace = false
    //    }

  }

  remote {
    maximum-payload-bytes = 100000000 bytes
    netty.tcp {
      message-frame-size = 100000000b
      send-buffer-size = 100000000b
      receive-buffer-size = 100000000b
      maximum-frame-size = 100000000b
    }
  }

  # Use slf4j (backed by logback) for logging, additional configuration
  # can be done in logback.xml
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = INFO

  # For the sample, just bind to loopback and do not allow access from the network
  remote.netty.tcp.hostname = 127.0.0.1
  # the port is overridden by the logic in Main.scala
  remote.netty.tcp.port = 0

  cluster {
    # Seed nodes are a way to have a node join the cluster (or form a new cluster) from configuration.
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      "akka.tcp://ClusterSystem@127.0.0.1:2552",
      "akka.tcp://ClusterSystem@127.0.0.1:2553",
      "akka.tcp://ClusterSystem@127.0.0.1:2554"]

    # Only for convenience in the quickstart, auto-downing should not be used for actual applications.
    # Read more here: http://doc.akka.io/docs/akka/current/scala/cluster-usage.html#auto-downing-do-not-use-
    auto-down-unreachable-after = 10s

    # Needed when running many actor systems in the same JVM
    jmx.multi-mbeans-in-same-jvm = on
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  # Run the pubsub mediator on all nodes, without any code starting it up
  extensions = ["akka.cluster.pubsub.DistributedPubSub",
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"]


  http {
    server.parsing.illegal-header-warnings = off
    client.parsing.illegal-header-warnings = off
  }

}

# Configuration related to the app is in its own namespace
distributed-workers {
  # Each worker pings the master with this interval
  # to let it know that it is alive
  worker-registration-interval = 10s
  # If a worker hasn't gotten in touch in this long
  # it is removed from the set of workers
  consider-worker-dead-after = 60s
  # Must be shorter than all the source's work-timeout
  # recommended value is half of the minimum work-timeout
  clean-up-timeout = 10s

}


sources {


  earth-explorer {
    description = "Earth Explorer - developed by USGS"
    base-url = "https://earthexplorer.usgs.gov/inventory/json/v/1.4.0/"
    fetching-frequency = 20s
    epoch = 6 //years
    # Retry starts after x seconds of the previous try
    retry-interval = 3s
    # Retry stops after x seconds without response
    retry-timeout = 5s
    # If a workload hasn't finished in this long it
    # is considered failed and is retried
    work-timeout = 40s
    start-delay = 20s
    page-size = 10

    products = [
      //      {program = "landsat", platform = "Landsat8", product-type = ["LANDSAT_8_C1"]},
      //      {program = "landsat", platform = "Landsat7", product-type = ["LSR_LANDSAT_ETM_C1"]},
      //      {program = "", platform = "modis", product-type = ["MODIS_MYD13Q1_V6"]},
    ]

    extractions = [
      {
        name = "metadata"
        query-type = "file"
        result-type = "json"
        query = "$"
        context = ""
        context-format = "json"
        dest-path = "./data/(productId)/query-metadata.json"
      }

    ]

    landsat7 = {

      extractions = [
        {
          name = "executionTime"
          query-type = "single-value"
          result-type = "double"
          query = "$.executionTime"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-executionTime.json"
        }
      ]
    }


    landsat8 = {
      extractions = [
        {
          name = "coordinates"
          query-type = "single-value"
          result-type = "object"
          query = "$.data..spatialFootprint.coordinates"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-coordinates.json"
        }
      ]
    }


    landsat = {
      extractions = [
        {
          name = "product_id"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Landsat Product Identifier')].value"
          context = "metadata"
          context-format = "json"
          dest-path = "./data/(productId)/query-id.json"
        }
      ]
    }

  }


  copernicus {

    copernicus-oah-opensearch {

      description = "Copernicus Open Access Hub - OpenSearch"

      base-url = "https://scihub.copernicus.eu/dhus/search?"
      fetching-frequency = 20s
      epoch = 6 //years
      # Retry starts after x seconds of the previous try
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 40s
      start-delay = 20s
      page-size = 10
      credentials {
        username = "andrelopes"
        pwd = "andrelopez14"
      }
      # The products that I am interested in
      # https://scihub.copernicus.eu/userguide/AdvancedSearch check product type for the syntax
      products = [
        {program = "sentinel", platform = "Sentinel2", product-type = ["S2MSI1C", "S2MSI2A"]},
        {program = "sentinel", platform = "Sentinel1", product-type = ["SLC"]},
        {program = "sentinel", platform = "Sentinel3", product-type = ["OL_1_ERR___"]}
      ]

      extractions = []

      sentinel = {
        extractions = [
          {
            name = "entry"
            query-type = "file"
            result-type = "json"
            query = "$"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-entry.json"
          },
          {
            name = "summary"
            query-type = "single-value"
            result-type = "string"
            query = "$.summary"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-summary.json"
          },
          {
            name = "id"
            query-type = "single-value"
            result-type = "string"
            query = "$.id"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-id.json"
          },
          {
            name = "title"
            query-type = "single-value"
            result-type = "string"
            query = "$.title"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-title.json"
          },
          {
            name = "ingestiondate"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='ingestiondate')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-ingestiondate.json"
          },
          {
            name = "beginposition"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='beginposition')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-beginposition.json"
          },
          {
            name = "endposition"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='endposition')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-endposition.json"
          },
          {
            name = "footprint"
            query-type = "file"
            result-type = "xml"
            query = "$.str[?(@.name=='gmlfootprint')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-footprint.json"
          },
          {
            name = "instrumentshortname"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='instrumentshortname')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-instrumentshortname.json"
          },
          {
            name = "instrumentname"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='instrumentname')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-instrumentname.json"
          },
          {
            name = "platformname"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='platformname')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-platformname.json"
          },
          {
            name = "size"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='size')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-size.json"
          },
          {
            name = "icon-url"
            query-type = "single-value"
            result-type = "string"
            query = "$.link[?(@.rel=='icon')].href"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-icon_url.json"
          },
          {
            name = "product-url"
            query-type = "single-value"
            result-type = "string"
            query = "$.link[?(!@.rel)].href"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-product-url.json"
          },
          {
            name = "orbitnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='orbitnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-orbitnumber.json"
          },
          {
            name = "relativeorbitnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='relativeorbitnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-relativeorbitnumber.json"
          },
          {
            name = "orbitdirection"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='orbitdirection')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-orbitdirection.json"
          },
        ]
      }

      sentinel2 = {
        extractions = [
          {
            name = "processinglevel"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='processinglevel')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-processinglevel.json"
          },
          {
            name = "s2datatakeid"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='s2datatakeid')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-s2datatakeid.json"
          },
          {
            name = "cloudcoverpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='cloudcoverpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-cloudcoverpercentage.json"
          },
        ]
      }


      S2MSI1C = {
        extractions = [
          {
            name = "tileid"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='tileid')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-tileid.json"
          },
          {
            name = "hv_order_tileid"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='hv_order_tileid')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-hv_order_tileid.json"
          },
          {
            name = "datatakesensingstart"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='datatakesensingstart')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-datatakesensingstart.json"
          },

        ]
      }

      S2MSI2A = {
        extractions = [

          {
            name = "highprobacloudspercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='highprobacloudspercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-highprobacloudspercentage.json"
          },
          {
            name = "mediumprobacloudspercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='mediumprobacloudspercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-mediumprobacloudspercentage.json"
          }, {
            name = "notvegetatedpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='notvegetatedpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-notvegetatedpercentage.json"
          }, {
            name = "snowicepercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='snowicepercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-snowicepercentage.json"
          }, {
            name = "unclassifiedpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='unclassifiedpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-unclassifiedpercentage.json"
          },
          {
            name = "vegetationpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='vegetationpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-vegetationpercentage.json"
          },
          {
            name = "waterpercentage"
            query-type = "single-value"
            result-type = "double"
            query = "$.double[?(@.name=='waterpercentage')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-waterpercentage.json"
          },
        ]
      }


      sentinel3 = {
        extractions = [
          {
            name = "creationdate"
            query-type = "single-value"
            result-type = "string"
            query = "$.date[?(@.name=='creationdate')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-creationdate.json"
          },
          {
            name = "productlevel"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='productlevel')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-productlevel.json"
          },
          {
            name = "relorbitdir"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='relorbitdir')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-relorbitdir.json"
          },
          {
            name = "relpassnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.str[?(@.name=='relpassnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-relpassnumber.json"
          },
          {
            name = "relpassdirection"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='relpassdirection')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-relpassdirection.json"
          },
          {
            name = "timeliness"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='timeliness')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-timeliness.json"
          },
          {
            name = "pduduration"
            query-type = "single-value"
            result-type = "int"
            query = "$.str[?(@.name=='pduduration')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-pduduration.json"
          },
          {
            name = "sensoroperationalmode"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='sensoroperationalmode')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-sensoroperationalmode.json"
          },

        ]
      }


      sentinel1 = {
        extractions = [
          {
            name = "swathidentifier"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='swathidentifier')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-swathidentifier.json"
          },
          {
            name = "polarisationmode"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='polarisationmode')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-polarisationmode.json"
          },
          {
            name = "productclass"
            query-type = "single-value"
            result-type = "string"
            query = "$.str[?(@.name=='productclass')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-productclass.json"
          },
          {
            name = "missiondatatakeid"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='missiondatatakeid')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-missiondatatakeid.json"
          },
          {
            name = "lastorbitnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='lastorbitnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-lastorbitnumber.json"
          },
          {
            name = "slicenumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='slicenumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-slicenumber.json"
          },
          {
            name = "lastrelativeorbitnumber"
            query-type = "single-value"
            result-type = "int"
            query = "$.int[?(@.name=='lastrelativeorbitnumber')].content"
            context = "open-search-entry"
            context-format = "xml"
            dest-path = "./data/(productId)/query-lastrelativeorbitnumber.json"
          },
        ]
      }

    }


    copernicus-oah-odata {

      description = "Copernicus Open Access Hub - OData"

      base-url = "https://scihub.copernicus.eu/dhus/odata/v1/"
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 20s

      credentials {
        username = "andrelopes"
        pwd = "andrelopez14"
      }


      extractions = [
        {
          name = "manifest"
          query-type = "file"
          result-type = "json"
          query = "$"
          context = ""
          context-format = "xml"
          dest-path = "./data/(productId)/query-manifest.json"
        }
      ]


      //          //            name = "Datastrips"
      //          //            query-type = "container"
      //          //            result-type = ""
      //          //            query = ""
      //          //            context = ""
      //          //            context-format = ""
      //          //            dest-path = ""
      //          //          }

      //          //          {
      //          //            api = "copernicus-odata"
      //          //            name = "QI_DATA_Tile1"
      //          //            query-type = "container"
      //          //            result-type = "undefined"
      //          //            query = ""
      //          //            context = ""
      //          //            dest-path = ""


    }
  }


  creodias {
    creodias-odata {

      description = "CREODIAS - OData"

      base-url = "https://finder.creodias.eu/resto/api/collections"
      retry-interval = 3s
      # Retry stops after x seconds without response
      retry-timeout = 5s
      # If a workload hasn't finished in this long it
      # is considered failed and is retried
      work-timeout = 20s

      extractions = [

      ]

      //      sentinel2 = {
      //        extractions = [
      //          {
      //            name = "keywords"
      //            query-type = "multi-file"
      //            result-type = "json"
      //            query = "$.features[0].properties.keywords[*]"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-keywords-multi-file.json"
      //          },
      //          {
      //            name = "properties"
      //            query-type = "file"
      //            result-type = "json"
      //            query = "$.properties"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-properties.json"
      //          },
      //          {
      //            name = "creodias-file"
      //            query-type = "file"
      //            result-type = "json"
      //            query = "$"
      //            context = ""
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-file.json"
      //          },
      //          {
      //            name = "keywords-multi-value"
      //            query-type = "multi-value"
      //            result-type = "object"
      //            query = "$.features[0].properties.keywords[*]"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-keywords-multi-value.json"
      //          },
      //          {
      //            name = "keywords-name"
      //            query-type = "multi-value"
      //            result-type = "string"
      //            query = "$.features[0].properties.keywords[*].value"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-keywords-value.json"
      //          },
      //          {
      //            name = "keywords-single-value"
      //            query-type = "single-value"
      //            result-type = "object"
      //            query = "$.features[0].properties.keywords[0]"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-keywords-single-value.json"
      //          },
      //          {
      //            name = "totalResults"
      //            query-type = "single-value"
      //            result-type = "int"
      //            query = "$.properties.totalResults"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-totalResults.json"
      //          },
      //          {
      //            name = "exactCount"
      //            query-type = "single-value"
      //            result-type = "boolean"
      //            query = "$.properties.exactCount"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-exactCount.json"
      //          },
      //          {
      //            name = "processingTime"
      //            query-type = "single-value"
      //            result-type = "double"
      //            query = "$.properties.query.processingTime"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-processingTime.json"
      //          },
      //          {
      //            name = "collection"
      //            query-type = "single-value"
      //            result-type = "string"
      //            query = "$.features[0].properties.collection"
      //            context = "creodias-file"
      //            context-format = "json"
      //            dest-path = "./data/(productId)/query-collection.json"
      //          }
      //
      //        ]
      //      }

    }
  }
}
