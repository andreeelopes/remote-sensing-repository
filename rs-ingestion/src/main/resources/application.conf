
# This is the main configuration file for our application, it provides overrides to the default values
# provided in the reference.conf of the modules from Akka
akka {
  actor {
    # Must be set like this to use Akka Cluster
    provider = cluster

    # Only for convenience in the quickstart, Java serialization should not be used for actual applications
    warn-about-java-serializer-usage = off


    //    serializers {
    //      java = "akka.serialization.JavaSerializer"
    //      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    //    }
    //
    //    serialization-bindings {
    //      "utils.KryoSerializable" = kryo
    //    }

    //    kryo{
    //      type = "graph"
    //      idstrategy = "default"
    //      serializer-pool-size = 16
    //      buffer-size = 4096
    //      use-manifests = false
    //      implicit-registration-logging = false
    //      kryo-trace = false
    //    }

  }

  remote {
    maximum-payload-bytes = 100000000 bytes
    netty.tcp {
      message-frame-size = 100000000b
      send-buffer-size = 100000000b
      receive-buffer-size = 100000000b
      maximum-frame-size = 100000000b
    }
  }

  # Use slf4j (backed by logback) for logging, additional configuration
  # can be done in logback.xml
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = INFO

  remote {
    netty.tcp {
      hostname = ${clustering.ip}   # external (logical) hostname (the host to advertise on)
      port = ${clustering.port}       # external (logical) port (the port to advertise on)

      //      bind-hostname = "0.0.0.0"  # internal (bind) hostname
      //      bind-port = 0      # internal (bind) port
    }
  }

  cluster {

    # Seed nodes are a way to have a node join the cluster (or form a new cluster) from configuration.
    seed-nodes = [
      "akka.tcp://ClusterSystem@"${clustering.seed-ip}":"${clustering.seed-port}
    ]

    # Only for convenience in the quickstart, auto-downing should not be used for actual applications.
    # Read more here: http://doc.akka.io/docs/akka/current/scala/cluster-usage.html#auto-downing-do-not-use-
    auto-down-unreachable-after = 10s

    # Needed when running many actor systems in the same JVM
    jmx.multi-mbeans-in-same-jvm = on
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"

  }

  # Run the pubsub mediator on all nodes, without any code starting it up
  extensions = ["akka.cluster.pubsub.DistributedPubSub",
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"]


  http {
    server.parsing.illegal-header-warnings = off
    client.parsing.illegal-header-warnings = off
  }

}

cassandra-journal {
  contact-points = [${clustering.cassandra-ip}]
}

cassandra-snapshot-store {
  contact-points = [${clustering.cassandra-ip}]
}


clustering {
  ip = "127.0.0.1"
  ip = ${?PUBLISH_HOST}
  port = 0
  port = ${?PUBLISH_PORT}

  seed-ip = "127.0.0.1"
  seed-ip = ${?SEED_PORT_TCP_ADDR}
  seed-port = 2551
  seed-port = ${?SEED_PORT_TCP_PORT}

  cassandra-ip = "127.0.0.1"
  cassandra-ip = ${?CASSANDRA_IP_TCP_ADDR}

  mongo-ip = "127.0.0.1"
  mongo-ip = ${?MONGO_IP_TCP_ADDR}

  base-dir = "./data"
  base-dir = ${?BASE_DIR}
}

mongo {
  ip-port = [
    {ip = ${clustering.mongo-ip}, port = 27017}
  ]
  //  credentials {
  //    username = "andrelopes"
  //    password = "password"
  //  }
}

api {
  // Required by the `ask` (?) method
  ask-timeout = 5s
}

orchestrator {
  # Retry starts after x seconds of the previous try
  retry-interval = 3s
  # Retry stops after x seconds without response
  retry-timeout = 5s
}

# Configuration related to the app is in its own namespace
distributed-workers {
  # Each worker pings the master with this interval
  # to let it know that it is alive
  worker-registration-interval = 10s
  # If a worker hasn't gotten in touch in this long
  # it is removed from the set of workers
  consider-worker-dead-after = 60s
  # Must be shorter than all the source's work-timeout
  # recommended value is half of the minimum work-timeout
  clean-up-timeout = 10s
  # If a workload hasn't finished in this long it
  # is considered failed and is retried
  work-timeout = 20s

  max-work-tries = 10

  work-timeout-multiplier = 3
  work-backoff-base = 2
}


sources {

  //  DatasetNumber is extracted like this way
  // http://prntscr.com/oc0z5y -> http://prntscr.com/oc0zco -> /metadata/12267/LE71510192019049NPA00/ -> 12267

  search-data-nasa { // modis download request to EE is redirected to the NASAS search data platform
    credentials {
      username = "andrelopes"
      pwd = "Andrelopes14"
    }
  }


  earth-explorer {
    description = "Earth Explorer - developed by USGS"
    base-url = "https://earthexplorer.usgs.gov/inventory/json/v/1.4.0/"
    fetching-frequency = 20s
    epoch = 6 //years
    //    work-timeout = 40s
    start-delay = 15s
    page-size = 10

    concurrency-limit = 1

    products = [
      {program = "landsat", platform = "landsat8", product-type = ["LANDSAT_8_C1"]},
      {program = "landsat", platform = "landsat7", product-type = ["LANDSAT_ETM_C1"]},
      {program = "modis", platform = "combined", product-type = ["MODIS_MYD13Q1_V6"]},
    ]

    credentials {
      username = "andrelopes"
      pwd = "andrelopes14"
    }

    extractions = [
      {
        name = "metadata"
        query-type = "file"
        result-type = "json"
        query = "$"
        context = "metadata"
        context-format = "json"
        dest-path = ${clustering.base-dir}"/(productId)/metadata.json"
        metamodel-mapping = "metadataFile"
      },
      {
        name = "displayId"
        query-type = "single-value"
        result-type = "string"
        query = "$.data..displayId"
        context = "metadata"
        context-format = "json"
        metamodel-mapping = "title"
      },
      {
        name = "entityId"
        query-type = "single-value"
        result-type = "string"
        query = "$.data..entityId"
        context = "metadata"
        context-format = "json"
        metamodel-mapping = "entityId"
      },
      //      {
      //        name = "acquisitionDate"
      //        query-type = "single-value"
      //        result-type = "date"
      //        query = "$.data..acquisitionDate"
      //        context = "metadata"
      //        context-format = "json"
      //        metamodel-mapping = "acquisitionDate"
      //        date-format = "YYYY-MM-dd"
      //      },
      {
        name = "spatialFootprint"
        query-type = "single-value"
        result-type = "object"
        query = "$.data..spatialFootprint"
        context = "metadata"
        context-format = "json"
        metamodel-mapping = "footprint"
      },
      //      {
      //        name = "fgdcMetadataUrl"
      //        query-type = "single-value"
      //        result-type = "string"
      //        query = "$.data..fgdcMetadataUrl"
      //        context = "metadata"
      //        context-format = "json"
      //        metamodel-mapping = "fgdcMetadataFile"
      //      },
      {
        name = "browseUrl"
        query-type = "single-value"
        result-type = "string"
        query = "$.data..browseUrl"
        context = "metadata"
        context-format = "json"
        metamodel-mapping = "iconFile"
      }

    ]

    landsat = {
      extractions = [
        {
          name = "start_time"
          query-type = "single-value"
          result-type = "date"
          query = "$.data..metadataFields[?(@.fieldName=='Start Time')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "acquisitionDateStart"
          date-format = "YYYY:DDD:HH:mm:ss.SSSSSSS"
        },
        {
          name = "start_time_dayofyear"
          query-type = "single-value"
          result-type = "date"
          result-type-transformation = "int"
          query = "$.data..metadataFields[?(@.fieldName=='Start Time')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "acquisitionDayOfYearStart"
          date-format = "YYYY:DDD:HH:mm:ss.SSSSSSS"
        },
        {
          name = "stop_time"
          query-type = "single-value"
          result-type = "date"
          query = "$.data..metadataFields[?(@.fieldName=='Stop Time')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "acquisitionDateEnd"
          date-format = "YYYY:DDD:HH:mm:ss.SSSSSSS"
        },
        {
          name = "stop_time_dayofyear"
          query-type = "single-value"
          result-type = "date"
          result-type-transformation = "int"
          query = "$.data..metadataFields[?(@.fieldName=='Stop Time')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "acquisitionDayOfYearEnd"
          date-format = "YYYY:DDD:HH:mm:ss.SSSSSSS"
        },
        {
          name = "Collection Category"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Collection Category')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "collectionTier"
        },
        {
          name = "WRS Path"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='WRS Path')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "wrsPath"
        },
        {
          name = "WRS Row"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='WRS Row')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "wrsRow"
        },
        //        {
        //          name = "Date L-1 Generated"
        //          query-type = "single-value"
        //          result-type = "date"
        //          query = "$.data..metadataFields[?(@.fieldName=='Date L-1 Generated')].value"
        //          context = "metadata"
        //          context-format = "json"
        //          metamodel-mapping = "lastL1Product"
        //          date-format = "YYYY/MM/dd"
        //        },
        //        {
        //          name = "Image Quality"
        //          query-type = "single-value"
        //          result-type = "int"
        //          query = "$.data..metadataFields[?(@.fieldName=='Image Quality')].value"
        //          context = "metadata"
        //          context-format = "json"
        //          metamodel-mapping = "imageQuality"
        //        },
        {
          name = "Land Cloud Cover"
          query-type = "single-value"
          result-type = "double"
          query = "$.data..metadataFields[?(@.fieldName=='Land Cloud Cover')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "landCloudCoverPercentage"
        },
        {
          name = "Scene Cloud Cover"
          query-type = "single-value"
          result-type = "double"
          query = "$.data..metadataFields[?(@.fieldName=='Scene Cloud Cover')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "cloudCoverPercentage"
        },
        //        {
        //          name = "Data Type Level-1"
        //          query-type = "single-value"
        //          result-type = "string"
        //          query = "$.data..metadataFields[?(@.fieldName=='Data Type Level-1')].value"
        //          context = "metadata"
        //          context-format = "json"
        //          metamodel-mapping = "productTypeL1"
        //        },
        {
          name = "Collection Number"
          query-type = "single-value"
          result-type = "int"
          query = "$.data..metadataFields[?(@.fieldName=='Collection Number')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "collectionNumber"
        },
        {
          name = "UTM Zone"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='UTM Zone')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "utmZone"
        },


      ]
    }

    landsat8 = {
      extractions = [
        {
          name = "Day/Night Indicator"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Day/Night Indicator')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "dayNightIndicator"
        },
        {
          name = "Target WRS Path"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Target WRS Path')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "targetWrsPath"
        },
        {
          name = "Target WRS Row"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Target WRS Row')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "targetWrsRow"
        },
        {
          name = "Nadir/Off Nadir"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Nadir/Off Nadir')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "nadirCondition"
        },
        {
          name = "Roll Angle"
          query-type = "single-value"
          result-type = "double"
          query = "$.data..metadataFields[?(@.fieldName=='Roll Angle')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "rollAngle"
        },
        {
          name = "Sensor Identifier"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Sensor Identifier')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "instrumentShortName"
        },
        {
          name = "Sun Elevation L1"
          query-type = "single-value"
          result-type = "double"
          query = "$.data..metadataFields[?(@.fieldName=='Sun Elevation L1')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "sunElevation"
        },
        {
          name = "Sun Azimuth L1"
          query-type = "single-value"
          result-type = "double"
          query = "$.data..metadataFields[?(@.fieldName=='Sun Azimuth L1')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "sunAzimuth"
        },
      ]
    }

    LANDSAT_8_C1 = {
      extractions = [

      ]

      datasetNumber = 12864
    }

    landsast7 = {
      extractions = [
        {
          name = "Sensor Mode"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Sensor Mode')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "sensorMode"
        },
        {
          name = "Sun Elevation L1"
          query-type = "single-value"
          result-type = "double"
          query = "$.data..metadataFields[?(@.fieldName=='Sun Elevation L1')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "sunElevation"
        },
        {
          name = "Sun Azimuth L-1"
          query-type = "single-value"
          result-type = "double"
          query = "$.data..metadataFields[?(@.fieldName=='Sun Azimuth L-1')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "sunAzimuth"
        },
      ]
    }

    LANDSAT_ETM_C1 = {
      extractions = [

      ]

      datasetNumber = 12267
    }

    MODIS_MYD13Q1_V6 = {
      datasetNumber = 10791

      extractions = [
        {
          name = "Local Granule ID"
          query-type = "single-value"
          result-type = "string"
          query = "$.data..metadataFields[?(@.fieldName=='Local Granule ID')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "granuleId"
        },
        {
          name = "Acquisition Start Date"
          query-type = "single-value"
          result-type = "date"
          query = "$.data..metadataFields[?(@.fieldName=='Acquisition Start Date')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "acquisitionDateStart"
          date-format = "YYYY/MM/dd"
        },
        {
          name = "Acquisition Start Day of Year"
          query-type = "single-value"
          result-type = "date"
          result-type-transformation = "int"
          query = "$.data..metadataFields[?(@.fieldName=='Acquisition Start Date')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "acquisitionDayOfYearStart"
          date-format = "YYYY/MM/dd"
        },
        {
          name = "Acquisition End Date"
          query-type = "single-value"
          result-type = "date"
          query = "$.data..metadataFields[?(@.fieldName=='Acquisition End Date')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "acquisitionDateEnd"
          date-format = "YYYY/MM/dd"
        },
        {
          name = "Acquisition End Day of Year"
          query-type = "single-value"
          result-type = "date"
          result-type-transformation = "int"
          query = "$.data..metadataFields[?(@.fieldName=='Acquisition End Date')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "acquisitionDayOfYearEnd"
          date-format = "YYYY/MM/dd"
        },
        {
          name = "Vertical Tile Number"
          query-type = "single-value"
          result-type = "int"
          query = "$.data..metadataFields[?(@.fieldName=='Vertical Tile Number')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "verticalTileNumber"
        },
        {
          name = "Horizontal Tile Number"
          query-type = "single-value"
          result-type = "int"
          query = "$.data..metadataFields[?(@.fieldName=='Horizontal Tile Number')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "horizontalTileNumber"
        },
        {
          name = "Missing Data Percentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.data..metadataFields[?(@.fieldName=='Missing Data Percentage')].value"
          context = "metadata"
          context-format = "json"
          metamodel-mapping = "noDataPercentage"
        },

      ]
    }

  }

  earth-explorer-download-api {
    concurrency-limit = 6

    credentials {
      username = ${sources.earth-explorer.credentials.username}
      pwd = ${sources.earth-explorer.credentials.pwd}
    }
  }

  copernicus-oah-opensearch {

    description = "Copernicus Open Access Hub - OpenSearch"

    base-url = "https://scihub.copernicus.eu/dhus/search?"
    fetching-frequency = 20s
    epoch = 6 //years
    # If a workload hasn't finished in this long it
    # is considered failed and is retried
    //      work-timeout = 40s
    start-delay = 15s
    page-size = 10


    credentials {
      username = "andrelopes"
      pwd = "andrelopes14"
    }
    # The products that I am interested in
    # https://scihub.copernicus.eu/userguide/AdvancedSearch check the product type syntax
    products = [
      {program = "sentinel", platform = "sentinel2", product-type = ["S2MSI2A", "S2MSI1C"]},
      {program = "sentinel", platform = "sentinel1", product-type = ["SLC"]},
      {program = "sentinel", platform = "sentinel3", product-type = ["OL_1_ERR___"]}
    ]

    extractions = [

    ]

    sentinel = {
      extractions = [
        {
          name = "entry"
          query-type = "file"
          result-type = "json"
          query = "$"
          context = "open-search-entry"
          context-format = "xml"
          dest-path = ${clustering.base-dir}"/(productId)/entry.json"
          metamodel-mapping = "metadataFile"
        },
        {
          name = "summary"
          query-type = "single-value"
          result-type = "string"
          query = "$.summary"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "summary"
        },
        {
          name = "title"
          query-type = "single-value"
          result-type = "string"
          query = "$.title"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "title"
        },
        //          {
        //            name = "ingestiondate"
        //            query-type = "single-value"
        //            result-type = "date"
        //            query = "$.date[?(@.name=='ingestiondate')].content"
        //            context = "open-search-entry"
        //            context-format = "xml"
        //            metamodel-mapping = "ingestionDate"
        //            date-format = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        //          },
        {
          name = "beginposition"
          query-type = "single-value"
          result-type = "date"
          query = "$.date[?(@.name=='beginposition')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "acquisitionDateStart"
          date-format = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        },
        {
          name = "beginposition-dayofyear"
          query-type = "single-value"
          result-type = "date"
          result-type-transformation = "int"
          query = "$.date[?(@.name=='beginposition')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "acquisitionDayOfYearStart"
          date-format = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        },
        {
          name = "endposition"
          query-type = "single-value"
          result-type = "date"
          query = "$.date[?(@.name=='endposition')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "acquisitionDateEnd"
          date-format = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        },
        {
          name = "endposition-dayofyear"
          query-type = "single-value"
          result-type = "date"
          result-type-transformation = "int"
          query = "$.date[?(@.name=='endposition')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "acquisitionDayOfYearEnd"
          date-format = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        },
        {
          name = "footprint"
          query-type = "single-value"
          result-type = "string"
          result-type-transformation = "object"
          query = "$.str[?(@.name=='gmlfootprint')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "footprint"
        },
        {
          name = "instrumentshortname"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='instrumentshortname')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "instrumentShortName"
        },
        {
          name = "instrumentname"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='instrumentname')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "instrumentName"
        },
        //          {
        //            name = "platformname"
        //            query-type = "single-value"
        //            result-type = "string"
        //            query = "$.str[?(@.name=='platformname')].content"
        //            context = "open-search-entry"
        //            context-format = "xml"
        //            metamodel-mapping = "platform-name"
        //          },
        {
          name = "size"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='size')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "size"
        },
        //        {
        //          name = "icon-url"
        //          query-type = "single-value"
        //          result-type = "string"
        //          query = "$.link[?(@.rel=='icon')].href"
        //          context = "open-search-entry"
        //          context-format = "xml"
        //          metamodel-mapping = "data.iconFile"
        //        },
        //        {
        //          name = "product-url"
        //          query-type = "single-value"
        //          result-type = "string"
        //          query = "$.link[?(!@.rel)].href"
        //          context = "open-search-entry"
        //          context-format = "xml"
        //          metamodel-mapping = "data.originalProductFile"
        //        },
        {
          name = "orbitnumber"
          query-type = "single-value"
          result-type = "int"
          query = "$.int[?(@.name=='orbitnumber')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "orbitNumber"
        },
        {
          name = "relativeorbitnumber"
          query-type = "single-value"
          result-type = "int"
          query = "$.int[?(@.name=='relativeorbitnumber')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "relativeOrbitNumber"
        },
        {
          name = "orbitdirection"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='orbitdirection')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "orbitDirection"
        },
      ]
    }

    sentinel2 = {
      extractions = [
        //          {
        //            name = "processinglevel"
        //            query-type = "single-value"
        //            result-type = "string"
        //            query = "$.str[?(@.name=='processinglevel')].content"
        //            context = "open-search-entry"
        //            context-format = "xml"
        //            metamodel-mapping = "processingLevel"
        //          },
        {
          name = "s2datatakeid"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='s2datatakeid')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "datatakeId"
        },
        {
          name = "cloudcoverpercentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.double[?(@.name=='cloudcoverpercentage')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "cloudCoverPercentage"
        },
      ]
    }


    S2MSI1C = {
      extractions = [
        //        {
        //          name = "tileid"
        //          query-type = "single-value"
        //          result-type = "string"
        //          query = "$.str[?(@.name=='tileid')].content"
        //          context = "open-search-entry"
        //          context-format = "xml"
        //          metamodel-mapping = "tileId"
        //        },
        //        {
        //          name = "hv_order_tileid"
        //          query-type = "single-value"
        //          result-type = "string"
        //          query = "$.str[?(@.name=='hv_order_tileid')].content"
        //          context = "open-search-entry"
        //          context-format = "xml"
        //          metamodel-mapping = "hvOrderTileId"
        //        },
        //        {
        //          name = "datatakesensingstart"
        //          query-type = "single-value"
        //          result-type = "date"
        //          query = "$.date[?(@.name=='datatakesensingstart')].content"
        //          context = "open-search-entry"
        //          context-format = "xml"
        //          metamodel-mapping = "datatakeSensingStart"
        //          date-format = "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        //        },

      ]
    }

    S2MSI2A = {
      extractions = [

        {
          name = "highprobacloudspercentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.double[?(@.name=='highprobacloudspercentage')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "highProbaCloudsPercentage"
        },
        {
          name = "mediumprobacloudspercentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.double[?(@.name=='mediumprobacloudspercentage')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "mediumProbaCloudsPercentage"
        }, {
          name = "notvegetatedpercentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.double[?(@.name=='notvegetatedpercentage')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "notVegetatedPercentage"
        }, {
          name = "snowicepercentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.double[?(@.name=='snowicepercentage')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "snowIcePercentage"
        }, {
          name = "unclassifiedpercentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.double[?(@.name=='unclassifiedpercentage')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "unclassifiedPercentage"
        },
        {
          name = "vegetationpercentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.double[?(@.name=='vegetationpercentage')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "vegetationPercentage"
        },
        {
          name = "waterpercentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.double[?(@.name=='waterpercentage')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "waterPercentage"
        },
      ]
    }


    sentinel3 = {
      extractions = [
        //          {
        //            name = "creationdate"
        //            query-type = "single-value"
        //            result-type = "date"
        //            query = "$.date[?(@.name=='creationdate')].content"
        //            context = "open-search-entry"
        //            context-format = "xml"
        //            metamodel-mapping = "creationDate"
        //            date-format = "yyyy-MM-dd'T'HH:mm:ssZ"
        //          },
        {
          name = "productlevel"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='productlevel')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "processingLevel"
        },
        {
          name = "relorbitdir"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='relorbitdir')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "relativeOrbitDir"
        },
        {
          name = "relpassnumber"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='relpassnumber')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "relativePassNumber"
        },
        {
          name = "relpassdirection"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='relpassdirection')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "relativePassDirection"
        },
        {
          name = "timeliness"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='timeliness')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "timeliness"
        },
        {
          name = "pduduration"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='pduduration')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "pduDuration"
        },
        {
          name = "sensoroperationalmode"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='sensoroperationalmode')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "sensorMode"
        },

      ]
    }


    sentinel1 = {
      extractions = [
        {
          name = "swathidentifier"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='swathidentifier')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "swathId"
        },
        {
          name = "polarisationmode"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='polarisationmode')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "polarisationMode"
        },
        {
          name = "productclass"
          query-type = "single-value"
          result-type = "string"
          query = "$.str[?(@.name=='productclass')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "productClass"
        },
        {
          name = "missiondatatakeid"
          query-type = "single-value"
          result-type = "int"
          query = "$.int[?(@.name=='missiondatatakeid')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "missionDatatakeId"
        },
        {
          name = "lastorbitnumber"
          query-type = "single-value"
          result-type = "int"
          query = "$.int[?(@.name=='lastorbitnumber')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "lastOrbitNumber"
        },
        {
          name = "lastrelativeorbitnumber"
          query-type = "single-value"
          result-type = "int"
          query = "$.int[?(@.name=='lastrelativeorbitnumber')].content"
          context = "open-search-entry"
          context-format = "xml"
          metamodel-mapping = "lastRelativeOrbitNumber"
        },


      ]
    }

  }


  copernicus-oah-odata {

    description = "Copernicus Open Access Hub - OData"

    base-url = "https://scihub.copernicus.eu/dhus/odata/v1/"

    concurrency-limit = 2

    credentials {
      username = "andrelopes"
      pwd = "andrelopes14"
    }


    extractions = [
      {
        name = "manifest"
        query-type = "file"
        result-type = "json"
        query = "$"
        context = ""
        context-format = "xml"
        dest-path = ${clustering.base-dir}"/(productId)/manifest.json"
        metamodel-mapping = "sentinelManifestFile"
      }
    ]


    //      sentinel1 = {
    //        extractions = [
    //          //          {
    //          //            name = "s1Level1ProductSchema"
    //          //            query-type = "container"
    //          //            result-type = ""
    //          //            query = ""
    //          //            context = ""
    //          //            context-format = ""
    //          //            dest-path = ""
    //          //            metamodel-mapping = "s1Level1ProductSchema"
    //          //          },
    //          //          {
    //          //            name = "s1Level1NoiseSchema"
    //          //            query-type = "container"
    //          //            result-type = ""
    //          //            query = ""
    //          //            context = ""
    //          //            context-format = ""
    //          //            dest-path = ""
    //          //            metamodel-mapping = "s1Level1NoiseSchema"
    //          //          },
    //
    //        ]
    //
    //      }

    OL_1_ERR___ = {
      extractions = [
        {
          name = "saline-water-percentage"
          query-type = "single-value"
          result-type = "double"
          query = "$.xfdu:XFDU.metadataSection..metadataObject[?(@.ID=='olciProductInformation')].metadataWrap.xmlData.olci:olciProductInformation.olci:classificationSummary.sentinel3:salineWaterPixels.percentage"
          context = "manifest"
          context-format = "xml"
          metamodel-mapping = "salineWaterPercentage"
        },
        {
          name = "coastal-pixels"
          query-type = "single-value"
          result-type = "double"
          query = "$.xfdu:XFDU.metadataSection..metadataObject[?(@.ID=='olciProductInformation')].metadataWrap.xmlData.olci:olciProductInformation.olci:classificationSummary.sentinel3:coastalPixels.percentage"
          context = "manifest"
          context-format = "xml"
          metamodel-mapping = "coastalPixels"
        },
        {
          name = "fresh-inland-water-pixels"
          query-type = "single-value"
          result-type = "double"
          query = "$.xfdu:XFDU.metadataSection..metadataObject[?(@.ID=='olciProductInformation')].metadataWrap.xmlData.olci:olciProductInformation.olci:classificationSummary.sentinel3:freshInlandWaterPixels.percentage"
          context = "manifest"
          context-format = "xml"
          metamodel-mapping = "freshInlandWaterPixels"
        },
        {
          name = "tidal-region-pixels"
          query-type = "single-value"
          result-type = "double"
          query = "$.xfdu:XFDU.metadataSection..metadataObject[?(@.ID=='olciProductInformation')].metadataWrap.xmlData.olci:olciProductInformation.olci:classificationSummary.sentinel3:tidalRegionPixels.percentage"
          context = "manifest"
          context-format = "xml"
          metamodel-mapping = "tidalRegionPixels"
        },
        {
          name = "bright-pixels"
          query-type = "single-value"
          result-type = "double"
          query = "$.xfdu:XFDU.metadataSection..metadataObject[?(@.ID=='olciProductInformation')].metadataWrap.xmlData.olci:olciProductInformation.olci:classificationSummary.sentinel3:brightPixels.percentage"
          context = "manifest"
          context-format = "xml"
          metamodel-mapping = "brightPixels"
        },
        //        {
        //          name = "qualityFlagsData"
        //          query-type = "file"
        //          result-type = "nc"
        //          query = "$"
        //          context = ""
        //          context-format = ""
        //          dest-path = ${clustering.base-dir}"/(productId)/qualityFlagsData-file.json"
        //          metamodel-mapping = "data.qualityFlagsDataFile"
        //          update-url = true
        //        },


      ]
    }


  }


  creodias-odata {

    description = "CREODIAS - OData"
    base-url = "https://finder.creodias.eu/resto/api/collections"

    concurrency-limit = 2

    extractions = [

    ]

    //      sentinel2 = {
    //        extractions = [
    //          {
    //            name = "creodias-file"
    //            query-type = "file"
    //            result-type = "json"
    //            query = "$"
    //            context = ""
    //            context-format = "json"
    //            dest-path = ${clustering.base-dir}"/(productId)/creodias.json"
    //            metamodel-mapping = "creodias-metadata-file"
    //          },
    //          {
    //            name = "keywords"
    //            query-type = "multi-value"
    //            result-type = "object"
    //            query = "$.features[0].properties.keywords[*]"
    //            context = "creodias-file"
    //            context-format = "json"
    //            metamodel-mapping = "keywords"
    //          },
    //        ]
    //      }

  }


  //  amazon {  TODO
  //    description = "Amazon S3 Landsat 8"
  //  }
}


indexing {
  indexes = [
    {
      type = "full"
      order = "descending"
      fields-names = ["acquisitionDateEnd"]
    },
    {
      type = "full"
      order = "descending"
      fields-names = ["acquisitionDateStart"]
    },
    {
      type = "full"
      order = "descending"
      fields-names = ["acquisitionDayOfYearStart"]
    },
    {
      type = "full"
      order = "descending"
      fields-names = ["acquisitionDayOfYearEnd"]
    },

    {
      type = "full"
      order = "ascending"
      fields-names = ["platform"]
    },
    {
      type = "full"
      order = "ascending"
      fields-names = ["program"]
    },
    {
      type = "full"
      order = "ascending"
      fields-names = ["productType"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["cloudCoverPercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["data.imagery.resolution"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["data.imagery.band"]
    },
    {
      type = "full"
      order = "ascending"
      fields-names = ["title"]
    },
    {
      type = "geospatial"
      order = ""
      fields-names = ["footprint"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["instrumentShortName"]
    },

    #    landsat
    {
      type = "partial"
      order = "ascending"
      fields-names = ["collectionTier"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["wrsPath"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["wrsRow"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["landCloudCoverPercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["utmZone"]
    },

    # landsat 8

    {
      type = "partial"
      order = "ascending"
      fields-names = ["sunElevation"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["sunAzimuth"]
    },

    # landsat 7
    {
      type = "partial"
      order = "ascending"
      fields-names = ["sensorMode"]
    },
    # modis
    {
      type = "partial"
      order = "ascending"
      fields-names = ["noDataPercentage"]
    },

    # sentinel
    {
      type = "partial"
      order = "ascending"
      fields-names = ["instrumentName"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["orbitNumber"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["orbitDirection"]
    },


    # sentinel 2
    # 1C
    //    {
    //      type = "partial"
    //      order = "ascending"
    //      fields-names = ["datatakeSensingStart"]
    //    },

    # 2A
    {
      type = "partial"
      order = "ascending"
      fields-names = ["highProbaCloudsPercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["mediumProbaCloudsPercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["notVegetatedPercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["snowIcePercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["unclassifiedPercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["vegetationPercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["snowIcePercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["vegetationPercentage"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["waterPercentage"]
    },

    # sentinel 1
    {
      type = "partial"
      order = "ascending"
      fields-names = ["missionDatatakeId"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["polarisationMode"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["data.imagery.polarisation"]
    },

    # sentinel 3

    {
      type = "partial"
      order = "ascending"
      fields-names = ["processingLevel"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["timeliness"]
    },

    # OL_1_ERR__

    {
      type = "partial"
      order = "ascending"
      fields-names = ["brightPixels"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["tidalRegionPixels"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["freshInlandWaterPixels"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["coastalPixels"]
    },
    {
      type = "partial"
      order = "ascending"
      fields-names = ["salineWaterPercentage"]
    },


  ]
}
